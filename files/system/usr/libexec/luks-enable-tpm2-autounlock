#!/usr/bin/env -S bash
## setup auto-unlock LUKS2 encrypted root on Fedora/Silverblue/maybe others
set -eou pipefail

[[ "$UID" -eq 0 ]] || { echo "This script must be run as root."; exit 1;}

echo "This script uses systemd-cryptenroll to enable TPM2 auto-unlock."
echo "You can review systemd-cryptenroll's manpage for more information."
echo "This script will modify your system."
echo "It will enable TPM2 auto-unlock of your LUKS partition root device!"
echo "It will bind to PCRs 0+1+2+3+4+5+7+9 which are tied to your system state."
read -p "Are you sure you want to enable TPM2 auto-unlock? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # handle exits from shell or function but don't exit interactive shell
  [[ "$0" = "${BASH_SOURCE[0]}" ]] && exit 1 || return 1
fi

## Inspect Kernel Cmdline for rd.luks.uuid
RD_LUKS_UUID="$(xargs -n1 -a /proc/cmdline | grep rd.luks.uuid | cut -d = -f 2)"

# Check to make sure cmdline rd.luks.uuid exists
if [[ -z ${RD_LUKS_UUID:-} ]]; then
  printf "LUKS device not defined on Kernel Commandline.\n"
  printf "This is not supported by this script.\n"
  printf "Exiting...\n"
  exit 1
fi

# Check to make sure that the specified cmdline uuid exists.
if ! grep -q "${RD_LUKS_UUID}" <<< "$(lsblk)" ; then
  printf "LUKS device not listed in block devices.\n"
  printf "Exiting...\n"
  exit 1
fi

# Cut off the luks-
LUKS_PREFIX="luks-"
if grep -q ^${LUKS_PREFIX} <<< "${RD_LUKS_UUID}"; then
  DISK_UUID=${RD_LUKS_UUID#"$LUKS_PREFIX"}
else
  echo "LUKS UUID format mismatch."
  echo "Exiting..."
  exit 1
fi

# Specify Crypt Disk by-uuid
CRYPT_DISK="/dev/disk/by-uuid/$DISK_UUID"

# Check to make sure crypt disk exists
if [[ ! -L "$CRYPT_DISK" ]]; then
  printf "LUKS device not listed in block devices.\n"
  printf "Exiting...\n"
  exit 1
fi

if cryptsetup luksDump "$CRYPT_DISK" | grep systemd-tpm2 > /dev/null; then
  KEYSLOT=$(cryptsetup luksDump "$CRYPT_DISK" | grep -A29 systemd-tpm2 | \
        awk '/Keyslot/ {print $2}')
  echo "TPM2 already present in LUKS Keyslot $KEYSLOT of $CRYPT_DISK."
  echo "Remove the existing TPM2 enrollment with:"
  echo "    ujust remove-luks-tpm2-autounlock"
  echo "Exiting..."
  [[ "$0" = "${BASH_SOURCE[0]}" ]] && exit 1 || return 1
fi

## Run crypt enroll
echo "Enrolling TPM2 unlock requires your existing LUKS2 unlock password"
systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs "0+1+2+3+4+5+7+9" \
      "$CRYPT_DISK"

## Update crypttab
if [[ ! -f /etc/crypttab.known-good ]]; then
  cp -a /etc/crypttab /etc/crypttab.known-good
fi
sed -Ei 's/(discard).*/\1,tpm2-device=auto,tpm2-pcrs="0+1+2+3+4+5+7+9"' \
      /etc/crypttab

## add tpm2-tss to initramfs
if rpm-ostree initramfs | grep tpm2 > /dev/null; then
  echo "TPM2 already present in rpm-ostree initramfs config."
  rpm-ostree initramfs --disable
  echo "Re-running initramfs to pickup changes above."
fi
rpm-ostree initramfs --enable --arg="--force-add" --arg="tpm2-tss"

## Now reboot
echo
echo "TPM2 LUKS auto-unlock configured. Reboot now."

# Reference:
# https://fedoramagazine.org/use-systemd-cryptenroll-with-fido-u2f-or-tpm2-to-decrypt-your-disk/